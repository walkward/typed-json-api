# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Asset {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  location: String!
  fileType: FileTypes!
  success: Boolean!
  collections(skip: Int, take: Int): [Collection!]!
  folder: Folder!
}

input AssetInput {
  name: String!
  location: String!
  fileType: FileTypes!
  success: Boolean!
  folderId: ID!
}

type Base {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
}

type Collection {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  assets(skip: Int, take: Int): [Asset!]
  folder: Folder
  user: User
  group: Group
}

input CollectionInput {
  name: String!
  folderId: ID
  userId: ID
  groupId: ID
}

type Customer {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  users(skip: Int, take: Int): [User!]!
  groups(skip: Int, take: Int): [Group!]
  projects(skip: Int, take: Int): [Project!]
}

input CustomerInput {
  name: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

# Acceptable file type extensions
enum FileTypes {
  jpg
  png
  gif
}

type Folder {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  collections: [Collection!]
  project: Project
  projectId: String!
  children(skip: Int, take: Int): [Folder!]
  parent: Folder
  parentId: String!
  childCount: Int!
  assets: [Asset!]
}

input FolderInput {
  name: String!
  parentId: ID
  projectId: ID
}

type Group {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  collections(skip: Int, take: Int): [Collection!]
  users(skip: Int, take: Int): [User!]!
  customer: Customer!
}

input GroupInput {
  name: String!
  customerId: ID!
}

type Mutation {
  addAsset(asset: AssetInput!): Asset!
  addUser(user: UserInput!): User!
  addCustomer(customer: CustomerInput!): Customer!
  addGroup(group: GroupInput!): Group!
  addProject(project: ProjectInput!): Project!
  addCollection(collection: CollectionInput!): Collection!
  addFolder(folder: FolderInput!): Folder!
  addNotification(notification: NotificationInput!): Boolean!
}

type Notification {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  message: String!
  topic: String!
}

input NotificationInput {
  message: String!
  topic: String!
}

type Project {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  name: String!
  folder: Folder!
  user: User
  customer: Customer
}

input ProjectInput {
  name: String!
  customerId: ID!
}

type Query {
  asset(assetId: String!): Asset
  assets(skip: Int, take: Int): [Asset!]!
  user(userId: String!): User
  users(skip: Int, take: Int): [User!]!
  customer(customerId: String!): Customer
  customers(skip: Int, take: Int): [Customer!]!
  group(groupId: String!): Group
  groups(skip: Int, take: Int): [Group!]!
  project(projectId: String!): Project
  projects(skip: Int, take: Int): [Project!]!
  collection(collectionId: String!): Collection
  collections(skip: Int, take: Int): [Collection!]!
  folder(folderId: String!): Folder
  folders(skip: Int, take: Int): [Folder!]!
  notification(notificationId: String!): Notification
  notifications(skip: Int, take: Int): [Notification!]!
}

type Subscription {
  userSubscription(topic: String!): Notification!
  newNotifications(topic: String!): Notification!
}

type User {
  id: ID!
  created: DateTime!
  modified: DateTime!
  version: Float!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  login: String!
  groups(skip: Int, take: Int): [Group!]
  customer: Customer!
  collections(skip: Int, take: Int): [Collection!]
  projects(skip: Int, take: Int): [Project!]
}

input UserInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  login: String!
  customerId: ID!
}
